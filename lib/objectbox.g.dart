// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/user/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 7978175343267685913),
      name: 'UserModel',
      lastPropertyId: const IdUid(22, 1004875386519133687),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7241913960046504967),
            name: 'id_int',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1729624160192286898),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2227933166611381033),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5894350899244370966),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 9182679177368754622),
            name: 'full_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7117540742124666430),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(2, 1404067293726374764)),
        ModelProperty(
            id: const IdUid(7, 1834206096169159859),
            name: 'age',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3778482820188330131),
            name: 'bring_people',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 119491607264915930),
            name: 'sleep',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 915066745801260477),
            name: 'phone',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1306479706843730677),
            name: 'rol',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2996172509915017320),
            name: 'vape',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 923946700578415303),
            name: 'personality',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 7769126317878068040),
            name: 'likes_pets',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 3799933414373808501),
            name: 'clean',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 8952420283117857338),
            name: 'smoke',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2984127726847011212),
            name: 'gender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 6322318156307179557),
            name: 'latitude',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 2639618821254884365),
            name: 'longitude',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 6586141486109144892),
            name: 'stars',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 7841518691433668281),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 1004875386519133687),
            name: 'locality',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 7978175343267685913),
      lastIndexId: const IdUid(2, 1404067293726374764),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [5774503046238950327],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        7885223653836765980,
        6959392598754021100,
        4967792232607452566,
        2302018427441185513,
        7901061088323636018,
        2770156853905174659,
        2578856606350405108,
        3526015666223382485,
        8670033931061393199,
        7822698492600478121,
        646058187236278968,
        453571979918866314,
        7522170753390542928,
        8114214129312188171,
        7287917109056956785,
        9054497999825322407,
        6345485464311580930,
        670235180059385577,
        2999172074234913178,
        668281750275672376,
        3735554969042275254,
        3158718228921966924
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    UserModel: EntityDefinition<UserModel>(
        model: _entities[0],
        toOneRelations: (UserModel object) => [],
        toManyRelations: (UserModel object) => {},
        getId: (UserModel object) => object.id_int,
        setId: (UserModel object, int id) {
          object.id_int = id;
        },
        objectToFB: (UserModel object, fb.Builder fbb) {
          final imageOffset = fbb.writeString(object.image);
          final emailOffset = fbb.writeString(object.email);
          final passwordOffset = fbb.writeString(object.password);
          final full_nameOffset = fbb.writeString(object.full_name);
          final idOffset = fbb.writeString(object.id);
          final bring_peopleOffset = fbb.writeString(object.bring_people);
          final rolOffset = fbb.writeString(object.rol);
          final personalityOffset = fbb.writeString(object.personality);
          final cleanOffset = fbb.writeString(object.clean);
          final genderOffset = fbb.writeString(object.gender);
          final cityOffset = fbb.writeString(object.city);
          final localityOffset = fbb.writeString(object.locality);
          fbb.startTable(23);
          fbb.addInt64(0, object.id_int);
          fbb.addOffset(1, imageOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addOffset(4, full_nameOffset);
          fbb.addOffset(5, idOffset);
          fbb.addInt64(6, object.age);
          fbb.addOffset(7, bring_peopleOffset);
          fbb.addInt64(8, object.sleep);
          fbb.addInt64(9, object.phone);
          fbb.addOffset(10, rolOffset);
          fbb.addBool(11, object.vape);
          fbb.addOffset(12, personalityOffset);
          fbb.addBool(13, object.likes_pets);
          fbb.addOffset(14, cleanOffset);
          fbb.addBool(15, object.smoke);
          fbb.addOffset(16, genderOffset);
          fbb.addFloat64(17, object.latitude);
          fbb.addFloat64(18, object.longitude);
          fbb.addFloat64(19, object.stars);
          fbb.addOffset(20, cityOffset);
          fbb.addOffset(21, localityOffset);
          fbb.finish(fbb.endTable());
          return object.id_int;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final ageParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final full_nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final bring_peopleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final sleepParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final phoneParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final rolParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final vapeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final personalityParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, '');
          final likes_petsParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 30, false);
          final cleanParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 32, '');
          final smokeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 34, false);
          final genderParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 36, '');
          final latitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 38, 0);
          final longitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 40, 0);
          final starsParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 42, 0);
          final cityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 44, '');
          final localityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 46, '');
          final object = UserModel(
              id: idParam,
              age: ageParam,
              image: imageParam,
              email: emailParam,
              password: passwordParam,
              full_name: full_nameParam,
              bring_people: bring_peopleParam,
              sleep: sleepParam,
              phone: phoneParam,
              rol: rolParam,
              vape: vapeParam,
              personality: personalityParam,
              likes_pets: likes_petsParam,
              clean: cleanParam,
              smoke: smokeParam,
              gender: genderParam,
              latitude: latitudeParam,
              longitude: longitudeParam,
              stars: starsParam,
              city: cityParam,
              locality: localityParam)
            ..id_int =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [UserModel] entity fields to define ObjectBox queries.
class UserModel_ {
  /// see [UserModel.id_int]
  static final id_int =
      QueryIntegerProperty<UserModel>(_entities[0].properties[0]);

  /// see [UserModel.image]
  static final image =
      QueryStringProperty<UserModel>(_entities[0].properties[1]);

  /// see [UserModel.email]
  static final email =
      QueryStringProperty<UserModel>(_entities[0].properties[2]);

  /// see [UserModel.password]
  static final password =
      QueryStringProperty<UserModel>(_entities[0].properties[3]);

  /// see [UserModel.full_name]
  static final full_name =
      QueryStringProperty<UserModel>(_entities[0].properties[4]);

  /// see [UserModel.id]
  static final id = QueryStringProperty<UserModel>(_entities[0].properties[5]);

  /// see [UserModel.age]
  static final age =
      QueryIntegerProperty<UserModel>(_entities[0].properties[6]);

  /// see [UserModel.bring_people]
  static final bring_people =
      QueryStringProperty<UserModel>(_entities[0].properties[7]);

  /// see [UserModel.sleep]
  static final sleep =
      QueryIntegerProperty<UserModel>(_entities[0].properties[8]);

  /// see [UserModel.phone]
  static final phone =
      QueryIntegerProperty<UserModel>(_entities[0].properties[9]);

  /// see [UserModel.rol]
  static final rol =
      QueryStringProperty<UserModel>(_entities[0].properties[10]);

  /// see [UserModel.vape]
  static final vape =
      QueryBooleanProperty<UserModel>(_entities[0].properties[11]);

  /// see [UserModel.personality]
  static final personality =
      QueryStringProperty<UserModel>(_entities[0].properties[12]);

  /// see [UserModel.likes_pets]
  static final likes_pets =
      QueryBooleanProperty<UserModel>(_entities[0].properties[13]);

  /// see [UserModel.clean]
  static final clean =
      QueryStringProperty<UserModel>(_entities[0].properties[14]);

  /// see [UserModel.smoke]
  static final smoke =
      QueryBooleanProperty<UserModel>(_entities[0].properties[15]);

  /// see [UserModel.gender]
  static final gender =
      QueryStringProperty<UserModel>(_entities[0].properties[16]);

  /// see [UserModel.latitude]
  static final latitude =
      QueryDoubleProperty<UserModel>(_entities[0].properties[17]);

  /// see [UserModel.longitude]
  static final longitude =
      QueryDoubleProperty<UserModel>(_entities[0].properties[18]);

  /// see [UserModel.stars]
  static final stars =
      QueryDoubleProperty<UserModel>(_entities[0].properties[19]);

  /// see [UserModel.city]
  static final city =
      QueryStringProperty<UserModel>(_entities[0].properties[20]);

  /// see [UserModel.locality]
  static final locality =
      QueryStringProperty<UserModel>(_entities[0].properties[21]);
}
